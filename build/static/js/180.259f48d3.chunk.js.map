{"version":3,"file":"static/js/180.259f48d3.chunk.js","mappings":"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","sources":["components/3D/Box.js","components/3D/EditSinkLayer.js","components/3D/inPoly.js","components/3D/Sink.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useLayoutEffect, useMemo } from 'react'\nimport { NavLink, useNavigate, useParams, useLocation, BrowserRouter } from \"react-router-dom\";\nimport {\n    Edges, Stage, Extrude, Decal, RandomizedLight,\n    SoftShadows, Float, CameraControls, Sky, PerformanceMonitor,\n    useGLTF, useTexture, PivotControls, AccumulativeShadows,\n    GizmoHelper, GizmoViewport, OrbitControls, Html,\n} from \"@react-three/drei\"\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport * as THREE from \"three\"\nimport { Geometry, Base, Subtraction, Addition, Brush } from '@react-three/csg'\nimport Sink from './Sink.js'\nimport EditSinkLayer from './EditSinkLayer.js'\n\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nimport \"./3D.scss\"\n\nconst Scene = ({ mesh, scaleValue }) => {\n    let scale = 100\n    let dispatch = useDispatch()\n    const location = useLocation()\n    let textureSelected = useSelector((state) => state.textureSelected)\n    let  prop_Box_forma ={\n        forma: 1,\n        heightAll: 2000,\n        widthAll: 800,\n        thickness: 40,\n        cuts: [],\n    }\n    const { visible, colorBackground } = useSelector((state) => state.scene)\n    const [boxSize, setBoxSize] = useState(prop_Box_forma);\n\n    const textureMap = useLoader(TextureLoader, textureSelected.url)\n    textureMap.wrapS = THREE.RepeatWrapping\n    textureMap.wrapT = THREE.MirroredRepeatWrapping\n   \n\n    function NewBox(props) {\n\n        // var matrix = new THREE.Matrix4();\n        // matrix.multiply(new THREE.Matrix4().makeTranslation(0, 0, 850));\n        // matrix.multiply(new THREE.Matrix4().makeRotationZ(Math.PI / 2));\n\n        return (\n            <mesh\n                ref={mesh}\n                castShadow receiveShadow {...props}\n                matrixAutoUpdate={true}\n                castShadow\n            //onPointerDown={console.log}\n            //onPointerMove={(e) => console.log('move')}\n            >\n                <Geometry>\n                    <Base /*rotation={[ 0, Math.PI / 2, 0]} position={[-0.35, 0.4, 0.4]} */>\n                        <boxGeometry attach=\"geometry\" args={[boxSize.widthAll / 100, boxSize.heightAll / 100, boxSize.thickness / 100]} scale={props.scaleValue}/>\n                    </Base>\n\n                    {/* <Subtraction rotation={[Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\n                        <cylinderGeometry args={[1, 1, 1, 66, 32]} />\n                    </Subtraction> */}\n\n                    <Subtraction rotation={[0, 0, 0]} position={[0, 0, 0]}>\n                        <cylinderGeometry args={[0, 0, 0, 3, 3]} />\n                    </Subtraction>\n\n                    {boxSize.cuts.map((cut, i) => {\n                        if (cut.forma === \"square\") return (\n                            <Subtraction key={i} rotation={[0, 0, cut.rotation[2]]} position={[cut.position[0], cut.position[1], 0]}>\n                                <boxGeometry args={[cut.width / scale, cut.height / scale, 1]} />\n                            </Subtraction>\n                        )\n                        else return (\n                            <Subtraction key={i} rotation={[Math.PI / 2, 0, 0]} position={[cut.position[0], cut.position[1], 0]}>\n                                <cylinderGeometry args={[cut.width / 2 / scale, cut.width / 2 / scale, 1]} />\n                            </Subtraction>\n                        )\n                    })}\n\n                </Geometry>\n                {/* <ChamfersModels boxSize={boxSize} textureMap={textureMap} setBoxSize={setBoxSize} /> */}\n                <meshPhongMaterial\n                    map={textureMap} shininess={100} bumpMap={textureMap} bumpScale={0.01} transparent={false} attach=\"material-0\"\n                    // opacity={1} color={'lightgray'} \n                    color={0x999999}\n                />\n\n                <Sink setBoxSize={setBoxSize} boxSize={boxSize} />\n\n                {/* <meshStandardMaterial attach=\"material-1\" color=\"#2A8AFF\" /> */}\n            </mesh>\n        )\n    }\n\n    return (\n        <>\n        {textureSelected && \n        <>\n            <NewBox instanceMatrix={true} needsUpdate={true} scaleValue={scaleValue}/>\n            \n            <EditSinkLayer boxSize={boxSize} setBoxSize={setBoxSize} />\n\n            <GizmoHelper alignment=\"bottom-right\" margin={[80, 80]}>\n                <GizmoViewport labelColor=\"white\" axisHeadScale={1} />\n            </GizmoHelper>\n            \n        </>\n        }\n        </>\n    )\n}\n\nexport default Scene\n","import React, { useState } from 'react'\n\nconst EditSinkLayer = (props) => {\n    let scale = 100\n    let boxSize = props.boxSize\n    const [hovered, setHover] = useState(false)\n\n    function removeCut(cut) {\n        props.setBoxSize({\n            ...boxSize, cuts: boxSize.cuts.filter((item, i) => i !== cut)\n        })\n    }\n\n    function editCut(cut) {\n        // тут будет фнукция изменения положения и размера отверстия\n    }\n\n    return (\n        <>\n            {props.boxSize.cuts.map((cut, i) => {\n\n                return (\n                    <mesh key={i}\n                        rotation={\n                            cut.forma === \"square\" ? [0, 0, cut.rotation[2]] : [Math.PI / 2, 0, 0]\n                        }\n                        position={[cut.position[0], cut.position[1], 0]}\n                        // onPointerDown={()=> props.removeCut(i)}\n                        // onDoubleClick={()=> props.removeCut(i)}\n                        onContextMenu={() => removeCut(i)}\n                        onPointerOver={(event) => setHover(i)}\n                        onPointerOut={(event) => setHover(false)}\n                    >\n                        {cut.forma === \"square\" ?\n                            <boxGeometry args={[cut.width / scale, cut.height / scale, boxSize.thickness / scale]} />\n                            :\n                            <cylinderGeometry args={[cut.width / 2 / scale, cut.width / 2 / scale, boxSize.thickness / scale]} />\n                        }\n                        \n                        <meshPhongMaterial color={hovered === i ? 'red' : '#fff'} transparent={true} opacity={hovered !== i ? 0 : .6} />\n                    </mesh>\n                )\n\n            })\n            }\n        </>\n    )\n\n}\n\nexport default EditSinkLayer\n","export function inPoly(position, sinkState, boxSize, scal){\n    // console.log(\"!!!!!!!!!\", position, sinkState, boxSize, scal)\n    var x = position.x<0 ? position.x - sinkState.width/scal/2 : position.x + sinkState.width/scal/2;\n    var y = position.y<0 ? position.y - sinkState.height/scal/2 : position.y + sinkState.height/scal/2;\n    let xp, yp\n\n    if(boxSize.forma === 3){ // ограничение координат для П-образной формы\n        // Координаты  П образной модели\n        xp = new Array( // Массив X-координат полигона\n            -boxSize.widthAll/scal+boxSize.widthRight/scal/2, //1\n            -boxSize.widthAll/scal+boxSize.widthRight/scal/2, //2\n            boxSize.widthRight/scal/2, //3\n            boxSize.widthRight/scal/2, //4\n            -boxSize.widthRight/scal/2, //5\n            -boxSize.widthRight/scal/2, //6\n            -boxSize.widthAll/scal+boxSize.widthRight/scal, //7\n            -boxSize.widthAll/scal+boxSize.widthRight/scal, //8\n        ); // Массив X-координат полигона\n        yp = new Array( // Массив Y-координат полигона\n            -boxSize.heightAll/scal/2, //1\n            boxSize.heightAll/scal/2, //2\n            boxSize.heightAll/scal/2, //3\n            -( boxSize.heightAll/scal/2 - (boxSize.heightAll - boxSize.heightRight)/scal ), //4\n            -( boxSize.heightAll/scal/2 - (boxSize.heightAll - boxSize.heightRight)/scal ), //5\n            boxSize.heightAll/scal/2 - boxSize.heightRight/scal + boxSize.heightInsideRight/scal, //6\n            (boxSize.heightAll/2 - (boxSize.heightRight - boxSize.heightInsideRight))/scal, //7\n            -boxSize.heightAll/scal/2, //8\n        ); // Массив Y-координат полигона\n       \n    }else if(boxSize.forma === 2){ // ограничение координат для Г-образной формы\n        xp = new Array( // Массив X-координат полигона\n            -boxSize.widthVertical/scal/2,\n            -boxSize.widthVertical/scal/2,\n            (boxSize.widthAll-boxSize.widthVertical/2)/scal,\n            (boxSize.widthAll-boxSize.widthVertical/2)/scal,\n            boxSize.widthVertical/scal/2,\n            boxSize.widthVertical/scal/2,\n        ); // Массив X-координат полигона\n        yp = new Array( // Массив Y-координат полигона\n            -boxSize.heightAll/scal/2,\n            boxSize.heightAll/scal/2,\n            boxSize.heightAll/scal/2,\n            (boxSize.heightAll - boxSize.heightGorizonal*2)/scal/2,\n            (boxSize.heightAll - boxSize.heightGorizonal*2)/scal/2,\n            -boxSize.heightAll/scal/2,\n        ); // Массив Y-координат полигона\n       \n    }\n\n    var npol = xp.length;\n    var j = npol - 1;\n    var c = false;\n\n    for (var i = 0; i < npol;i++){\n        if ((((yp[i]<=y) && (y<yp[j])) || ((yp[j]<=y) && (y<yp[i]))) &&\n          (x > (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i])) {\n          c = !c\n        }\n      j = i;\n    }\n    return c;\n}\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { Canvas, useLoader, useThree } from '@react-three/fiber'\nimport { useTexture, PivotControls, Decal, Html, Text, Grid, Line } from \"@react-three/drei\"\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'\n// import { useControls } from 'leva'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setVisibleSink } from \"../../redux/reducers/scene.js\";\nimport { inPoly } from './inPoly.js'\n\nimport \"./3D.scss\"\nimport { Button } from 'primereact/button'\n\nconst Sink = (props) => {\n    let scal = 100 // значение масштабирования\n    const { visibleSink, sinkState } = useSelector((state) => state.scene)\n    const dispatch = useDispatch()\n    const [pos, setXYZ] = useState([0, 0, props.boxSize.thickness / scal])\n\n    const [rot, setRot] = useState([0, 0, 0])\n    const [colorDecal, setColorDecal] = useState('rgb(236, 108, 108)')    \n\n    function cutSink() {\n        props.setBoxSize({\n            ...props.boxSize, cuts:\n\n                [...props.boxSize.cuts, {\n                    forma: sinkState.forma, width: sinkState.width, height: sinkState.height,\n                    position: pos, rotation: rot\n                }]\n\n        })\n        // props.cuts.push({ sinkSize: scale, position: positionSink } )\n        dispatch(setVisibleSink())\n    }\n    \n\n    //вычесление расстояния от края до отверстия\n    //без учета поворотов (для прямоугольных отверстий)\n    function sizeToEnd() {\n        // Расстояния от края до центра по \"х\" и \"у\"\n        let endToCenterX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2)\n        let endToCenterY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal)\n        // Расстояния от края до кпая отверстия по \"х\" и \"у\"\n        // без учета повроротов для прямоугольных отверстий\n        let endToEndX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2 - 100)\n        let endToEndY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal - 150)\n        return {\n            endToCenterX: endToCenterX, // от края до центра по Х\n            endToCenterY: endToCenterY, // от края до центра по Y\n            endToEndX: endToEndX, // от края до края по Х\n            endToEndY: endToEndY // от края до края по Y\n        }\n    }\n\n    // Функция изменение координат отвертсия при перетягивании мышью\n    function dragSink(position) {\n        // Ограничим движение отверстия границами габаритов модели\n        let x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n        let y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n        // Зададим изначальное положение отверстия для разных форм\n        let defPointCorrection = 0\n\n        if(props.boxSize.forma === 3){ // ограничение координат для П-образной формы\n            defPointCorrection = (props.boxSize.widthAll-props.boxSize.widthRight)/2/scal\n            // Изменить цвет декаля \n            // if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ) setColorDecal('yellow')\n            // else setColorDecal('rgb(236, 108, 108)')\n            // Сдвинуть Декаль или ограниить движение\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n            }\n           \n        }else if(props.boxSize.forma === 2){ // ограничение координат для Г-образной формы\n            defPointCorrection = -(props.boxSize.widthAll-props.boxSize.widthVertical)/2/scal\n\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n\n            }\n           \n        }else{ // ограничение координат для простой формы\n            defPointCorrection = 0\n            x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n            y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n\n            setXYZ(\n                [\n                    x_axisLimits ? position.x+defPointCorrection : pos[0], \n                    y_axisLimits ? position.y : pos[1], \n                    props.boxSize.thickness / scal / 2 + 0.01\n                ]\n            )\n        }\n    }\n\n    let shemaCircle = `${process.env.PUBLIC_URL}/icons/circle.svg`\n    let shemaDecal = useTexture(shemaCircle)\n    \n    if (visibleSink) return (\n        <>\n            <group position={[ 0, 0, 0.25]}>\n                <PivotControls\n                    scale={0.88}\n                    activeAxes={[true, true, false]} //\n                    // onClick={() => { console.log(\"positionSink!!!\", positionSink) }}\n                    onDrag={(local) => {\n                        const position = new THREE.Vector3()\n                        // console.log(position)\n                        // setPositionSink(position)\n                        const scale = new THREE.Vector3()\n                        const quaternion = new THREE.Quaternion()\n                        local.decompose(position, quaternion, scale)\n                        const rotation = new THREE.Euler().setFromQuaternion(quaternion)\n                        dragSink(position)\n                        // console.log(position.x)\n                        setRot([rotation.x, rotation.y, rotation.z])\n                    }}\n                    onDragEnd={() => {\n                        // console.log(pos, rot)\n                    }}\n                />\n            </group>\n\n\n            <Decal //debug={debug} часть панели инструментов\n                position={pos} rotation={rot}\n                // scale={2 * scale}\n                scale={sinkState.forma == \"square\" ?\n                    [sinkState.width / 100, sinkState.height / 100, 1]\n                    :\n                    [sinkState.width / 100, sinkState.width / 100, 1]\n                }\n                // map={useTexture(urlPlita)}\n                color={colorDecal} //opacity={0.2}\n            >\n                {sinkState.forma !== \"square\" &&\n                    <meshPhysicalMaterial\n                        transparent\n                        polygonOffset\n                        polygonOffsetFactor={-10}\n                        map={shemaDecal}\n                        mapflipY={false}\n                        mapanisotropy={16}\n                        iridescence={1}\n                        iridescenceIOR={1}\n                        iridescenceThicknessRange={[0, 1400]}\n                        roughness={1}\n                        clearcoat={0.5}\n                        metalness={0.75}\n                        toneMapped={false}\n                    />\n                }\n            </Decal>    \n\n            <Html transform zIndexRange={1} position={[pos[0] + 1.5, pos[1] - 1, props.boxSize.thickness / scal / 2]}>\n                <Button style={styles.buttonSink} icon=\"pi pi-check\"\n                    tooltip=\"Вырезать\"\n                    // disabled={!positionSink.x}\n                    onClick={() => cutSink()}\n                />\n            </Html>\n        </>\n    )\n}\n\nexport default Sink\n\nconst styles = {\n    buttonSink: {\n        width: \"25px\",\n        height: \"15px\"\n    }\n}\n"],"names":["_ref","mesh","scaleValue","scale","useDispatch","useLocation","textureSelected","useSelector","state","visible","colorBackground","scene","boxSize","setBoxSize","useState","forma","heightAll","widthAll","thickness","cuts","textureMap","useLoader","TextureLoader","url","NewBox","props","_jsxs","ref","castShadow","receiveShadow","matrixAutoUpdate","children","Geometry","_jsx","Base","attach","args","Subtraction","rotation","position","map","cut","i","width","height","Math","PI","shininess","bumpMap","bumpScale","transparent","color","Sink","wrapS","THREE","wrapT","_Fragment","instanceMatrix","needsUpdate","EditSinkLayer","GizmoHelper","alignment","margin","GizmoViewport","labelColor","axisHeadScale","hovered","setHover","onContextMenu","filter","item","removeCut","onPointerOver","event","onPointerOut","opacity","inPoly","sinkState","scal","x","y","xp","yp","Array","widthRight","heightRight","heightInsideRight","widthVertical","heightGorizonal","npol","length","j","c","visibleSink","dispatch","pos","setXYZ","rot","setRot","colorDecal","setColorDecal","shemaCircle","concat","process","shemaDecal","useTexture","PivotControls","activeAxes","onDrag","local","quaternion","decompose","setFromQuaternion","x_axisLimits","abs","y_axisLimits","defPointCorrection","dragSink","z","onDragEnd","Decal","polygonOffset","polygonOffsetFactor","mapflipY","mapanisotropy","iridescence","iridescenceIOR","iridescenceThicknessRange","roughness","clearcoat","metalness","toneMapped","Html","transform","zIndexRange","Button","style","styles","buttonSink","icon","tooltip","onClick","setVisibleSink"],"sourceRoot":""}