{"ast":null,"code":"var _jsxFileName = \"/Users/ratseevtimur/Documents/Test-Projects/door-3d/src/components/3D/Sink.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\nimport { Canvas, useLoader, useThree } from '@react-three/fiber';\nimport { useTexture, PivotControls, Decal, Html, Text, Grid, Line } from \"@react-three/drei\";\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader';\n// import { useControls } from 'leva'\nimport * as THREE from \"three\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setVisibleSink } from \"../../redux/reducers/scene.js\";\nimport { inPoly } from './inPoly.js';\nimport \"./3D.scss\";\nimport { Button } from 'primereact/button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Sink = props => {\n  _s();\n  let scal = 100; // значение масштабирования\n  const {\n    visibleSink,\n    sinkState\n  } = useSelector(state => state.scene);\n  const dispatch = useDispatch();\n  const [pos, setXYZ] = useState([0, 0, props.boxSize.thickness / scal]);\n  const [rot, setRot] = useState([0, 0, 0]);\n  const [colorDecal, setColorDecal] = useState('rgb(236, 108, 108)');\n  function cutSink() {\n    props.setBoxSize({\n      ...props.boxSize,\n      cuts: [...props.boxSize.cuts, {\n        forma: sinkState.forma,\n        width: sinkState.width,\n        height: sinkState.height,\n        position: pos,\n        rotation: rot\n      }]\n    });\n    // props.cuts.push({ sinkSize: scale, position: positionSink } )\n    dispatch(setVisibleSink());\n  }\n\n  //вычесление расстояния от края до отверстия\n  //без учета поворотов (для прямоугольных отверстий)\n  function sizeToEnd() {\n    // Расстояния от края до центра по \"х\" и \"у\"\n    let endToCenterX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2);\n    let endToCenterY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal);\n    // Расстояния от края до кпая отверстия по \"х\" и \"у\"\n    // без учета повроротов для прямоугольных отверстий\n    let endToEndX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2 - 100);\n    let endToEndY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal - 150);\n    return {\n      endToCenterX: endToCenterX,\n      // от края до центра по Х\n      endToCenterY: endToCenterY,\n      // от края до центра по Y\n      endToEndX: endToEndX,\n      // от края до края по Х\n      endToEndY: endToEndY // от края до края по Y\n    };\n  }\n\n  // Функция изменение координат отвертсия при перетягивании мышью\n  function dragSink(position) {\n    // Ограничим движение отверстия границами габаритов модели\n    let x_axisLimits = Math.abs(position.x) + sinkState.width / 200 < Math.abs(props.boxSize.widthAll / 200);\n    let y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width) / 200 < Math.abs(props.boxSize.heightAll / 200);\n    // Зададим изначальное положение отверстия для разных форм\n    let defPointCorrection = 0;\n    if (props.boxSize.forma === 3) {\n      // ограничение координат для П-образной формы\n      defPointCorrection = (props.boxSize.widthAll - props.boxSize.widthRight) / 2 / scal;\n      // Изменить цвет декаля \n      // if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ) setColorDecal('yellow')\n      // else setColorDecal('rgb(236, 108, 108)')\n      // Сдвинуть Декаль или ограниить движение\n      if (inPoly(position, {\n        width: sinkState.width,\n        height: sinkState.height\n      }, props.boxSize, scal)) {\n        setXYZ([position.x + defPointCorrection, position.y, props.boxSize.thickness / scal / 2 + 0.01]);\n      }\n    } else if (props.boxSize.forma === 2) {\n      // ограничение координат для Г-образной формы\n      defPointCorrection = -(props.boxSize.widthAll - props.boxSize.widthVertical) / 2 / scal;\n      if (inPoly(position, {\n        width: sinkState.width,\n        height: sinkState.height\n      }, props.boxSize, scal)) {\n        setXYZ([position.x + defPointCorrection, position.y, props.boxSize.thickness / scal / 2 + 0.01]);\n      }\n    } else {\n      // ограничение координат для простой формы\n      defPointCorrection = 0;\n      x_axisLimits = Math.abs(position.x) + sinkState.width / 200 < Math.abs(props.boxSize.widthAll / 200);\n      y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width) / 200 < Math.abs(props.boxSize.heightAll / 200);\n      setXYZ([x_axisLimits ? position.x + defPointCorrection : pos[0], y_axisLimits ? position.y : pos[1], props.boxSize.thickness / scal / 2 + 0.01]);\n    }\n  }\n  let shemaCircle = '../icons/circle.svg';\n  let shemaDecal = useTexture(shemaCircle);\n  if (visibleSink) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"group\", {\n      position: [0, 0, 0.25],\n      children: /*#__PURE__*/_jsxDEV(PivotControls, {\n        scale: 0.88,\n        activeAxes: [true, true, false] //\n        // onClick={() => { console.log(\"positionSink!!!\", positionSink) }}\n        ,\n        onDrag: local => {\n          const position = new THREE.Vector3();\n          // console.log(position)\n          // setPositionSink(position)\n          const scale = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          local.decompose(position, quaternion, scale);\n          const rotation = new THREE.Euler().setFromQuaternion(quaternion);\n          dragSink(position);\n          // console.log(position.x)\n          setRot([rotation.x, rotation.y, rotation.z]);\n        },\n        onDragEnd: () => {\n          // console.log(pos, rot)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Decal //debug={debug} часть панели инструментов\n    , {\n      position: pos,\n      rotation: rot\n      // scale={2 * scale}\n      ,\n      scale: sinkState.forma == \"square\" ? [sinkState.width / 100, sinkState.height / 100, 1] : [sinkState.width / 100, sinkState.width / 100, 1]\n      // map={useTexture(urlPlita)}\n      ,\n      color: colorDecal //opacity={0.2}\n      ,\n      children: sinkState.forma !== \"square\" && /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n        transparent: true,\n        polygonOffset: true,\n        polygonOffsetFactor: -10,\n        map: shemaDecal,\n        mapflipY: false,\n        mapanisotropy: 16,\n        iridescence: 1,\n        iridescenceIOR: 1,\n        iridescenceThicknessRange: [0, 1400],\n        roughness: 1,\n        clearcoat: 0.5,\n        metalness: 0.75,\n        toneMapped: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Html, {\n      transform: true,\n      zIndexRange: 1,\n      position: [pos[0] + 1.5, pos[1] - 1, props.boxSize.thickness / scal / 2],\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        style: styles.buttonSink,\n        icon: \"pi pi-check\",\n        tooltip: \"\\u0412\\u044B\\u0440\\u0435\\u0437\\u0430\\u0442\\u044C\"\n        // disabled={!positionSink.x}\n        ,\n        onClick: () => cutSink()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Sink, \"mgscdFBnZMnKhOHjPvmrHnRM+qY=\", false, function () {\n  return [useSelector, useDispatch, useTexture];\n});\n_c = Sink;\nexport default Sink;\nconst styles = {\n  buttonSink: {\n    width: \"25px\",\n    height: \"15px\"\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Sink\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useMemo","Canvas","useLoader","useThree","useTexture","PivotControls","Decal","Html","Text","Grid","Line","SVGLoader","THREE","useSelector","useDispatch","setVisibleSink","inPoly","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","Sink","props","_s","scal","visibleSink","sinkState","state","scene","dispatch","pos","setXYZ","boxSize","thickness","rot","setRot","colorDecal","setColorDecal","cutSink","setBoxSize","cuts","forma","width","height","position","rotation","sizeToEnd","endToCenterX","Math","round","widthAll","endToCenterY","heightAll","endToEndX","endToEndY","dragSink","x_axisLimits","abs","x","y_axisLimits","y","defPointCorrection","widthRight","widthVertical","shemaCircle","shemaDecal","children","scale","activeAxes","onDrag","local","Vector3","quaternion","Quaternion","decompose","Euler","setFromQuaternion","z","onDragEnd","fileName","_jsxFileName","lineNumber","columnNumber","color","transparent","polygonOffset","polygonOffsetFactor","map","mapflipY","mapanisotropy","iridescence","iridescenceIOR","iridescenceThicknessRange","roughness","clearcoat","metalness","toneMapped","transform","zIndexRange","style","styles","buttonSink","icon","tooltip","onClick","_c","$RefreshReg$"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/src/components/3D/Sink.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { Canvas, useLoader, useThree } from '@react-three/fiber'\nimport { useTexture, PivotControls, Decal, Html, Text, Grid, Line } from \"@react-three/drei\"\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'\n// import { useControls } from 'leva'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setVisibleSink } from \"../../redux/reducers/scene.js\";\nimport { inPoly } from './inPoly.js'\n\nimport \"./3D.scss\"\nimport { Button } from 'primereact/button'\n\nconst Sink = (props) => {\n    let scal = 100 // значение масштабирования\n    const { visibleSink, sinkState } = useSelector((state) => state.scene)\n    const dispatch = useDispatch()\n    const [pos, setXYZ] = useState([0, 0, props.boxSize.thickness / scal])\n\n    const [rot, setRot] = useState([0, 0, 0])\n    const [colorDecal, setColorDecal] = useState('rgb(236, 108, 108)')    \n\n    function cutSink() {\n        props.setBoxSize({\n            ...props.boxSize, cuts:\n\n                [...props.boxSize.cuts, {\n                    forma: sinkState.forma, width: sinkState.width, height: sinkState.height,\n                    position: pos, rotation: rot\n                }]\n\n        })\n        // props.cuts.push({ sinkSize: scale, position: positionSink } )\n        dispatch(setVisibleSink())\n    }\n    \n\n    //вычесление расстояния от края до отверстия\n    //без учета поворотов (для прямоугольных отверстий)\n    function sizeToEnd() {\n        // Расстояния от края до центра по \"х\" и \"у\"\n        let endToCenterX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2)\n        let endToCenterY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal)\n        // Расстояния от края до кпая отверстия по \"х\" и \"у\"\n        // без учета повроротов для прямоугольных отверстий\n        let endToEndX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2 - 100)\n        let endToEndY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal - 150)\n        return {\n            endToCenterX: endToCenterX, // от края до центра по Х\n            endToCenterY: endToCenterY, // от края до центра по Y\n            endToEndX: endToEndX, // от края до края по Х\n            endToEndY: endToEndY // от края до края по Y\n        }\n    }\n\n    // Функция изменение координат отвертсия при перетягивании мышью\n    function dragSink(position) {\n        // Ограничим движение отверстия границами габаритов модели\n        let x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n        let y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n        // Зададим изначальное положение отверстия для разных форм\n        let defPointCorrection = 0\n\n        if(props.boxSize.forma === 3){ // ограничение координат для П-образной формы\n            defPointCorrection = (props.boxSize.widthAll-props.boxSize.widthRight)/2/scal\n            // Изменить цвет декаля \n            // if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ) setColorDecal('yellow')\n            // else setColorDecal('rgb(236, 108, 108)')\n            // Сдвинуть Декаль или ограниить движение\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n            }\n           \n        }else if(props.boxSize.forma === 2){ // ограничение координат для Г-образной формы\n            defPointCorrection = -(props.boxSize.widthAll-props.boxSize.widthVertical)/2/scal\n\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n\n            }\n           \n        }else{ // ограничение координат для простой формы\n            defPointCorrection = 0\n            x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n            y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n\n            setXYZ(\n                [\n                    x_axisLimits ? position.x+defPointCorrection : pos[0], \n                    y_axisLimits ? position.y : pos[1], \n                    props.boxSize.thickness / scal / 2 + 0.01\n                ]\n            )\n        }\n    }\n\n    let shemaCircle = '../icons/circle.svg'\n    let shemaDecal = useTexture(shemaCircle)\n    \n    if (visibleSink) return (\n        <>\n            <group position={[ 0, 0, 0.25]}>\n                <PivotControls\n                    scale={0.88}\n                    activeAxes={[true, true, false]} //\n                    // onClick={() => { console.log(\"positionSink!!!\", positionSink) }}\n                    onDrag={(local) => {\n                        const position = new THREE.Vector3()\n                        // console.log(position)\n                        // setPositionSink(position)\n                        const scale = new THREE.Vector3()\n                        const quaternion = new THREE.Quaternion()\n                        local.decompose(position, quaternion, scale)\n                        const rotation = new THREE.Euler().setFromQuaternion(quaternion)\n                        dragSink(position)\n                        // console.log(position.x)\n                        setRot([rotation.x, rotation.y, rotation.z])\n                    }}\n                    onDragEnd={() => {\n                        // console.log(pos, rot)\n                    }}\n                />\n            </group>\n\n\n            <Decal //debug={debug} часть панели инструментов\n                position={pos} rotation={rot}\n                // scale={2 * scale}\n                scale={sinkState.forma == \"square\" ?\n                    [sinkState.width / 100, sinkState.height / 100, 1]\n                    :\n                    [sinkState.width / 100, sinkState.width / 100, 1]\n                }\n                // map={useTexture(urlPlita)}\n                color={colorDecal} //opacity={0.2}\n            >\n                {sinkState.forma !== \"square\" &&\n                    <meshPhysicalMaterial\n                        transparent\n                        polygonOffset\n                        polygonOffsetFactor={-10}\n                        map={shemaDecal}\n                        mapflipY={false}\n                        mapanisotropy={16}\n                        iridescence={1}\n                        iridescenceIOR={1}\n                        iridescenceThicknessRange={[0, 1400]}\n                        roughness={1}\n                        clearcoat={0.5}\n                        metalness={0.75}\n                        toneMapped={false}\n                    />\n                }\n            </Decal>    \n\n            <Html transform zIndexRange={1} position={[pos[0] + 1.5, pos[1] - 1, props.boxSize.thickness / scal / 2]}>\n                <Button style={styles.buttonSink} icon=\"pi pi-check\"\n                    tooltip=\"Вырезать\"\n                    // disabled={!positionSink.x}\n                    onClick={() => cutSink()}\n                />\n            </Html>\n        </>\n    )\n}\n\nexport default Sink\n\nconst styles = {\n    buttonSink: {\n        width: \"25px\",\n        height: \"15px\"\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}