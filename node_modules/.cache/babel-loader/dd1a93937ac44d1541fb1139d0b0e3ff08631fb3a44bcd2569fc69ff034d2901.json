{"ast":null,"code":"import { BufferAttribute } from 'three';\nexport function areSharedArrayBuffersSupported() {\n  return typeof SharedArrayBuffer !== 'undefined';\n}\nexport function convertToSharedArrayBuffer(array) {\n  if (array.buffer instanceof SharedArrayBuffer) {\n    return array;\n  }\n  const cons = array.constructor;\n  const buffer = array.buffer;\n  const sharedBuffer = new SharedArrayBuffer(buffer.byteLength);\n  const uintArray = new Uint8Array(buffer);\n  const sharedUintArray = new Uint8Array(sharedBuffer);\n  sharedUintArray.set(uintArray, 0);\n  return new cons(sharedBuffer);\n}\nexport function getIndexArray(vertexCount) {\n  let BufferConstructor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ArrayBuffer;\n  if (vertexCount > 65535) {\n    return new Uint32Array(new BufferConstructor(4 * vertexCount));\n  } else {\n    return new Uint16Array(new BufferConstructor(2 * vertexCount));\n  }\n}\nexport function ensureIndex(geo, options) {\n  if (!geo.index) {\n    const vertexCount = geo.attributes.position.count;\n    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n    const index = getIndexArray(vertexCount, BufferConstructor);\n    geo.setIndex(new BufferAttribute(index, 1));\n    for (let i = 0; i < vertexCount; i++) {\n      index[i] = i;\n    }\n  }\n}\nexport function getVertexCount(geo) {\n  return geo.index ? geo.index.count : geo.attributes.position.count;\n}\nexport function getTriCount(geo) {\n  return getVertexCount(geo) / 3;\n}","map":{"version":3,"names":["BufferAttribute","areSharedArrayBuffersSupported","SharedArrayBuffer","convertToSharedArrayBuffer","array","buffer","cons","constructor","sharedBuffer","byteLength","uintArray","Uint8Array","sharedUintArray","set","getIndexArray","vertexCount","BufferConstructor","arguments","length","undefined","ArrayBuffer","Uint32Array","Uint16Array","ensureIndex","geo","options","index","attributes","position","count","useSharedArrayBuffer","setIndex","i","getVertexCount","getTriCount"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/node_modules/three-bvh-csg/src/core/utils/geometryUtils.js"],"sourcesContent":["import { BufferAttribute } from 'three';\n\nexport function areSharedArrayBuffersSupported() {\n\n\treturn typeof SharedArrayBuffer !== 'undefined';\n\n}\n\nexport function convertToSharedArrayBuffer( array ) {\n\n\tif ( array.buffer instanceof SharedArrayBuffer ) {\n\n\t\treturn array;\n\n\t}\n\n\tconst cons = array.constructor;\n\tconst buffer = array.buffer;\n\tconst sharedBuffer = new SharedArrayBuffer( buffer.byteLength );\n\n\tconst uintArray = new Uint8Array( buffer );\n\tconst sharedUintArray = new Uint8Array( sharedBuffer );\n\tsharedUintArray.set( uintArray, 0 );\n\n\treturn new cons( sharedBuffer );\n\n}\n\nexport function getIndexArray( vertexCount, BufferConstructor = ArrayBuffer ) {\n\n\tif ( vertexCount > 65535 ) {\n\n\t\treturn new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t} else {\n\n\t\treturn new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t}\n\n}\n\nexport function ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tconst index = getIndexArray( vertexCount, BufferConstructor );\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\nexport function getVertexCount( geo ) {\n\n\treturn geo.index ? geo.index.count : geo.attributes.position.count;\n\n}\n\nexport function getTriCount( geo ) {\n\n\treturn getVertexCount( geo ) / 3;\n\n}\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,OAAO;AAEvC,OAAO,SAASC,8BAA8BA,CAAA,EAAG;EAEhD,OAAO,OAAOC,iBAAiB,KAAK,WAAW;AAEhD;AAEA,OAAO,SAASC,0BAA0BA,CAAEC,KAAK,EAAG;EAEnD,IAAKA,KAAK,CAACC,MAAM,YAAYH,iBAAiB,EAAG;IAEhD,OAAOE,KAAK;EAEb;EAEA,MAAME,IAAI,GAAGF,KAAK,CAACG,WAAW;EAC9B,MAAMF,MAAM,GAAGD,KAAK,CAACC,MAAM;EAC3B,MAAMG,YAAY,GAAG,IAAIN,iBAAiB,CAAEG,MAAM,CAACI,UAAW,CAAC;EAE/D,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAAEN,MAAO,CAAC;EAC1C,MAAMO,eAAe,GAAG,IAAID,UAAU,CAAEH,YAAa,CAAC;EACtDI,eAAe,CAACC,GAAG,CAAEH,SAAS,EAAE,CAAE,CAAC;EAEnC,OAAO,IAAIJ,IAAI,CAAEE,YAAa,CAAC;AAEhC;AAEA,OAAO,SAASM,aAAaA,CAAEC,WAAW,EAAoC;EAAA,IAAlCC,iBAAiB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,WAAW;EAE1E,IAAKL,WAAW,GAAG,KAAK,EAAG;IAE1B,OAAO,IAAIM,WAAW,CAAE,IAAIL,iBAAiB,CAAE,CAAC,GAAGD,WAAY,CAAE,CAAC;EAEnE,CAAC,MAAM;IAEN,OAAO,IAAIO,WAAW,CAAE,IAAIN,iBAAiB,CAAE,CAAC,GAAGD,WAAY,CAAE,CAAC;EAEnE;AAED;AAEA,OAAO,SAASQ,WAAWA,CAAEC,GAAG,EAAEC,OAAO,EAAG;EAE3C,IAAK,CAAED,GAAG,CAACE,KAAK,EAAG;IAElB,MAAMX,WAAW,GAAGS,GAAG,CAACG,UAAU,CAACC,QAAQ,CAACC,KAAK;IACjD,MAAMb,iBAAiB,GAAGS,OAAO,CAACK,oBAAoB,GAAG5B,iBAAiB,GAAGkB,WAAW;IACxF,MAAMM,KAAK,GAAGZ,aAAa,CAAEC,WAAW,EAAEC,iBAAkB,CAAC;IAC7DQ,GAAG,CAACO,QAAQ,CAAE,IAAI/B,eAAe,CAAE0B,KAAK,EAAE,CAAE,CAAE,CAAC;IAE/C,KAAM,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjB,WAAW,EAAEiB,CAAC,EAAG,EAAG;MAExCN,KAAK,CAAEM,CAAC,CAAE,GAAGA,CAAC;IAEf;EAED;AAED;AAEA,OAAO,SAASC,cAAcA,CAAET,GAAG,EAAG;EAErC,OAAOA,GAAG,CAACE,KAAK,GAAGF,GAAG,CAACE,KAAK,CAACG,KAAK,GAAGL,GAAG,CAACG,UAAU,CAACC,QAAQ,CAACC,KAAK;AAEnE;AAEA,OAAO,SAASK,WAAWA,CAAEV,GAAG,EAAG;EAElC,OAAOS,cAAc,CAAET,GAAI,CAAC,GAAG,CAAC;AAEjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}