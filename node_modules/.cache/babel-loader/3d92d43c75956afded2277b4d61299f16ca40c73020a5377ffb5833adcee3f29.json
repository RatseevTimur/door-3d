{"ast":null,"code":"import React,{useRef,useState,useEffect,useMemo}from'react';import{useLocation}from\"react-router-dom\";import{GizmoHelper,GizmoViewport,Html,useGLTF,useTexture}from\"@react-three/drei\";import{Canvas,useFrame,useLoader,useResource}from'@react-three/fiber';import{TextureLoader}from'three/src/loaders/TextureLoader';import*as THREE from\"three\";import{useSelector,useDispatch}from'react-redux';import\"./3D.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Model(_ref){let{textureSelected,scaleValue}=_ref;// const gltf = useLoader(GLTFLoader, '/door-gltf/scene.gltf')\n// return <primitive object={gltf.scene} />\nconst groupRef=useRef();const{nodes,materials}=useGLTF('/door-gltf/scene.gltf');const texture=useTexture(textureSelected.url);return/*#__PURE__*/ (//   <group ref={groupRef} {...props} dispose={null}>\n_jsx(\"mesh\",{castShadow:true,receiveShadow:true,scale:scaleValue,rotation:[0,1.56,0],geometry:nodes.Door_Default_0.geometry//material={materials['Material.001']}\n,children:/*#__PURE__*/_jsx(\"meshPhysicalMaterial\",{map:texture})})//  <mesh castShadow receiveShadow geometry={nodes.floatBufferViews.geometry} material={materials['Material.002']} /> \n//   </group>\n);}useGLTF.preload(\"/door-gltf/scene.gltf\");const Scene=_ref2=>{let{scaleValue}=_ref2;let textureSelected=useSelector(state=>state.textureSelected);// textureSelected.wrapS = THREE.RepeatWrapping\n// textureSelected.wrapT = THREE.MirroredRepeatWrapping\nreturn/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Model,{textureSelected:textureSelected,scaleValue:scaleValue}),/*#__PURE__*/_jsx(GizmoHelper,{alignment:\"bottom-right\",margin:[80,80],children:/*#__PURE__*/_jsx(GizmoViewport,{labelColor:\"white\",axisHeadScale:1})})]});};export default Scene;","map":{"version":3,"names":["React","useRef","useState","useEffect","useMemo","useLocation","GizmoHelper","GizmoViewport","Html","useGLTF","useTexture","Canvas","useFrame","useLoader","useResource","TextureLoader","THREE","useSelector","useDispatch","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Model","_ref","textureSelected","scaleValue","groupRef","nodes","materials","texture","url","castShadow","receiveShadow","scale","rotation","geometry","Door_Default_0","children","map","preload","Scene","_ref2","state","alignment","margin","labelColor","axisHeadScale"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/src/components/3D/GLTF.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport { GizmoHelper, GizmoViewport, Html, useGLTF, useTexture } from \"@react-three/drei\"\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport \"./3D.scss\"\n\nexport function Model({ textureSelected, scaleValue }) {\n    // const gltf = useLoader(GLTFLoader, '/door-gltf/scene.gltf')\n    // return <primitive object={gltf.scene} />\n\n    const groupRef = useRef()\n    const { nodes, materials } = useGLTF('/door-gltf/scene.gltf')\n    const texture = useTexture(textureSelected.url);\n    return (\n        //   <group ref={groupRef} {...props} dispose={null}>\n        <mesh castShadow receiveShadow\n            scale={scaleValue} rotation={[0, 1.56, 0]}\n            geometry={nodes.Door_Default_0.geometry}\n        //material={materials['Material.001']}\n        >\n            <meshPhysicalMaterial map={texture} />\n        </mesh>\n        //  <mesh castShadow receiveShadow geometry={nodes.floatBufferViews.geometry} material={materials['Material.002']} /> \n        //   </group>\n    )\n}\n\nuseGLTF.preload(\"/door-gltf/scene.gltf\");\n\nconst Scene = ({scaleValue}) => {\n    let textureSelected = useSelector((state) => state.textureSelected)\n    // textureSelected.wrapS = THREE.RepeatWrapping\n    // textureSelected.wrapT = THREE.MirroredRepeatWrapping\n\n   \n    return (\n        <>\n            <Model textureSelected={textureSelected} scaleValue={scaleValue}/>\n\n            <GizmoHelper alignment=\"bottom-right\" margin={[80, 80]}>\n                <GizmoViewport labelColor=\"white\" axisHeadScale={1} />\n            </GizmoHelper>\n        </>\n    )\n}\n\nexport default Scene\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,OAAO,KAAQ,OAAO,CACnE,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,WAAW,CAAEC,aAAa,CAAEC,IAAI,CAAEC,OAAO,CAAEC,UAAU,KAAQ,mBAAmB,CACzF,OAASC,MAAM,CAAEC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,oBAAoB,CAC7E,OAASC,aAAa,KAAQ,iCAAiC,CAC/D,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CAEtD,MAAO,WAAW,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElB,MAAO,SAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAkC,IAAjC,CAAEC,eAAe,CAAEC,UAAW,CAAC,CAAAF,IAAA,CACjD;AACA;AAEA,KAAM,CAAAG,QAAQ,CAAG5B,MAAM,CAAC,CAAC,CACzB,KAAM,CAAE6B,KAAK,CAAEC,SAAU,CAAC,CAAGtB,OAAO,CAAC,uBAAuB,CAAC,CAC7D,KAAM,CAAAuB,OAAO,CAAGtB,UAAU,CAACiB,eAAe,CAACM,GAAG,CAAC,CAC/C,oBACI;AACAb,IAAA,SAAMc,UAAU,MAACC,aAAa,MAC1BC,KAAK,CAAER,UAAW,CAACS,QAAQ,CAAE,CAAC,CAAC,CAAE,IAAI,CAAE,CAAC,CAAE,CAC1CC,QAAQ,CAAER,KAAK,CAACS,cAAc,CAACD,QACnC;AAAA,CAAAE,QAAA,cAEIpB,IAAA,yBAAsBqB,GAAG,CAAET,OAAQ,CAAE,CAAC,CACpC,CACN;AACA;AAAA,EAER,CAEAvB,OAAO,CAACiC,OAAO,CAAC,uBAAuB,CAAC,CAExC,KAAM,CAAAC,KAAK,CAAGC,KAAA,EAAkB,IAAjB,CAAChB,UAAU,CAAC,CAAAgB,KAAA,CACvB,GAAI,CAAAjB,eAAe,CAAGV,WAAW,CAAE4B,KAAK,EAAKA,KAAK,CAAClB,eAAe,CAAC,CACnE;AACA;AAGA,mBACIH,KAAA,CAAAF,SAAA,EAAAkB,QAAA,eACIpB,IAAA,CAACK,KAAK,EAACE,eAAe,CAAEA,eAAgB,CAACC,UAAU,CAAEA,UAAW,CAAC,CAAC,cAElER,IAAA,CAACd,WAAW,EAACwC,SAAS,CAAC,cAAc,CAACC,MAAM,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,CAAAP,QAAA,cACnDpB,IAAA,CAACb,aAAa,EAACyC,UAAU,CAAC,OAAO,CAACC,aAAa,CAAE,CAAE,CAAE,CAAC,CAC7C,CAAC,EAChB,CAAC,CAEX,CAAC,CAED,cAAe,CAAAN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}