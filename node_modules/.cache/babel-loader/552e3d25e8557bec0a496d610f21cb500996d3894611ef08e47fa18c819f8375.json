{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { Vector3 } from 'three';\nimport { calculateScaleFactor } from './calculateScaleFactor.js';\nconst worldPos = /* @__PURE__ */new Vector3();\n/**\n * Wraps children in an `Object3D` and attempts to scale from\n * world units to screen units * scale factor.\n *\n * For example, this will render a box of roughly 1x1 pixel size,\n * independently of how far the camera is.\n *\n * ```jsx\n * <ScreenSizer>\n *   <Box />\n * </ScreenSizer>\n * ```\n */\nconst ScreenSizer = /* @__PURE__ */forwardRef((_ref, ref) => {\n  let {\n    scale = 1,\n    ...props\n  } = _ref;\n  const container = useRef(null);\n  useFrame(state => {\n    const obj = container.current;\n    if (!obj) return;\n    const sf = calculateScaleFactor(obj.getWorldPosition(worldPos), scale, state.camera, state.size);\n    obj.scale.setScalar(sf * scale);\n  });\n  return /*#__PURE__*/React.createElement(\"object3D\", _extends({\n    ref: mergeRefs([container, ref])\n  }, props));\n});\nexport { ScreenSizer };","map":{"version":3,"names":["_extends","useFrame","React","forwardRef","useRef","mergeRefs","Vector3","calculateScaleFactor","worldPos","ScreenSizer","_ref","ref","scale","props","container","state","obj","current","sf","getWorldPosition","camera","size","setScalar","createElement"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/node_modules/@react-three/drei/core/ScreenSizer.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport mergeRefs from 'react-merge-refs';\nimport { Vector3 } from 'three';\nimport { calculateScaleFactor } from './calculateScaleFactor.js';\n\nconst worldPos = /* @__PURE__ */new Vector3();\n/**\n * Wraps children in an `Object3D` and attempts to scale from\n * world units to screen units * scale factor.\n *\n * For example, this will render a box of roughly 1x1 pixel size,\n * independently of how far the camera is.\n *\n * ```jsx\n * <ScreenSizer>\n *   <Box />\n * </ScreenSizer>\n * ```\n */\nconst ScreenSizer = /* @__PURE__ */forwardRef(({\n  scale = 1,\n  ...props\n}, ref) => {\n  const container = useRef(null);\n  useFrame(state => {\n    const obj = container.current;\n    if (!obj) return;\n    const sf = calculateScaleFactor(obj.getWorldPosition(worldPos), scale, state.camera, state.size);\n    obj.scale.setScalar(sf * scale);\n  });\n  return /*#__PURE__*/React.createElement(\"object3D\", _extends({\n    ref: mergeRefs([container, ref])\n  }, props));\n});\n\nexport { ScreenSizer };\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAC1C,OAAOC,SAAS,MAAM,kBAAkB;AACxC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,oBAAoB,QAAQ,2BAA2B;AAEhE,MAAMC,QAAQ,GAAG,eAAe,IAAIF,OAAO,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,WAAW,GAAG,eAAeN,UAAU,CAAC,CAAAO,IAAA,EAG3CC,GAAG,KAAK;EAAA,IAHoC;IAC7CC,KAAK,GAAG,CAAC;IACT,GAAGC;EACL,CAAC,GAAAH,IAAA;EACC,MAAMI,SAAS,GAAGV,MAAM,CAAC,IAAI,CAAC;EAC9BH,QAAQ,CAACc,KAAK,IAAI;IAChB,MAAMC,GAAG,GAAGF,SAAS,CAACG,OAAO;IAC7B,IAAI,CAACD,GAAG,EAAE;IACV,MAAME,EAAE,GAAGX,oBAAoB,CAACS,GAAG,CAACG,gBAAgB,CAACX,QAAQ,CAAC,EAAEI,KAAK,EAAEG,KAAK,CAACK,MAAM,EAAEL,KAAK,CAACM,IAAI,CAAC;IAChGL,GAAG,CAACJ,KAAK,CAACU,SAAS,CAACJ,EAAE,GAAGN,KAAK,CAAC;EACjC,CAAC,CAAC;EACF,OAAO,aAAaV,KAAK,CAACqB,aAAa,CAAC,UAAU,EAAEvB,QAAQ,CAAC;IAC3DW,GAAG,EAAEN,SAAS,CAAC,CAACS,SAAS,EAAEH,GAAG,CAAC;EACjC,CAAC,EAAEE,KAAK,CAAC,CAAC;AACZ,CAAC,CAAC;AAEF,SAASJ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}