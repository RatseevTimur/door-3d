{"ast":null,"code":"import { Vector3, Ray } from 'three';\nimport { toEdgeIndex, toTriIndex, matchEdges, getProjectedDistance } from './halfEdgeUtils.js';\nimport { toNormalizedRay } from './hashUtils.js';\nimport { RaySet } from './RaySet.js';\nconst _v0 = new Vector3();\nconst _v1 = new Vector3();\nconst _ray = new Ray();\nexport function computeDisjointEdges(geometry, unmatchedSet, eps) {\n  const attributes = geometry.attributes;\n  const indexAttr = geometry.index;\n  const posAttr = attributes.position;\n  const disjointConnectivityMap = new Map();\n  const fragmentMap = new Map();\n  const edges = Array.from(unmatchedSet);\n  const rays = new RaySet();\n  for (let i = 0, l = edges.length; i < l; i++) {\n    // get the triangle edge\n    const index = edges[i];\n    const triIndex = toTriIndex(index);\n    const edgeIndex = toEdgeIndex(index);\n    let i0 = 3 * triIndex + edgeIndex;\n    let i1 = 3 * triIndex + (edgeIndex + 1) % 3;\n    if (indexAttr) {\n      i0 = indexAttr.getX(i0);\n      i1 = indexAttr.getX(i1);\n    }\n    _v0.fromBufferAttribute(posAttr, i0);\n    _v1.fromBufferAttribute(posAttr, i1);\n\n    // get the ray corresponding to the edge\n    toNormalizedRay(_v0, _v1, _ray);\n\n    // find the shared ray with other edges\n    let info;\n    let commonRay = rays.findClosestRay(_ray);\n    if (commonRay === null) {\n      commonRay = _ray.clone();\n      rays.addRay(commonRay);\n    }\n    if (!fragmentMap.has(commonRay)) {\n      fragmentMap.set(commonRay, {\n        forward: [],\n        reverse: [],\n        ray: commonRay\n      });\n    }\n    info = fragmentMap.get(commonRay);\n\n    // store the stride of edge endpoints along the ray\n    let start = getProjectedDistance(commonRay, _v0);\n    let end = getProjectedDistance(commonRay, _v1);\n    if (start > end) {\n      [start, end] = [end, start];\n    }\n    if (_ray.direction.dot(commonRay.direction) < 0) {\n      info.reverse.push({\n        start,\n        end,\n        index\n      });\n    } else {\n      info.forward.push({\n        start,\n        end,\n        index\n      });\n    }\n  }\n\n  // match the found sibling edges\n  fragmentMap.forEach(({\n    forward,\n    reverse\n  }, ray) => {\n    matchEdges(forward, reverse, disjointConnectivityMap, eps);\n    if (forward.length === 0 && reverse.length === 0) {\n      fragmentMap.delete(ray);\n    }\n  });\n  return {\n    disjointConnectivityMap,\n    fragmentMap\n  };\n}","map":{"version":3,"names":["Vector3","Ray","toEdgeIndex","toTriIndex","matchEdges","getProjectedDistance","toNormalizedRay","RaySet","_v0","_v1","_ray","computeDisjointEdges","geometry","unmatchedSet","eps","attributes","indexAttr","index","posAttr","position","disjointConnectivityMap","Map","fragmentMap","edges","Array","from","rays","i","l","length","triIndex","edgeIndex","i0","i1","getX","fromBufferAttribute","info","commonRay","findClosestRay","clone","addRay","has","set","forward","reverse","ray","get","start","end","direction","dot","push","forEach","delete"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/node_modules/three-bvh-csg/src/core/utils/computeDisjointEdges.js"],"sourcesContent":["import { Vector3, Ray } from 'three';\nimport { toEdgeIndex, toTriIndex, matchEdges, getProjectedDistance } from './halfEdgeUtils.js';\nimport { toNormalizedRay } from './hashUtils.js';\nimport { RaySet } from './RaySet.js';\n\nconst _v0 = new Vector3();\nconst _v1 = new Vector3();\nconst _ray = new Ray();\n\nexport function computeDisjointEdges(\n\tgeometry,\n\tunmatchedSet,\n\teps,\n) {\n\n\tconst attributes = geometry.attributes;\n\tconst indexAttr = geometry.index;\n\tconst posAttr = attributes.position;\n\n\tconst disjointConnectivityMap = new Map();\n\tconst fragmentMap = new Map();\n\tconst edges = Array.from( unmatchedSet );\n\tconst rays = new RaySet();\n\n\tfor ( let i = 0, l = edges.length; i < l; i ++ ) {\n\n\t\t// get the triangle edge\n\t\tconst index = edges[ i ];\n\t\tconst triIndex = toTriIndex( index );\n\t\tconst edgeIndex = toEdgeIndex( index );\n\n\t\tlet i0 = 3 * triIndex + edgeIndex;\n\t\tlet i1 = 3 * triIndex + ( edgeIndex + 1 ) % 3;\n\t\tif ( indexAttr ) {\n\n\t\t\ti0 = indexAttr.getX( i0 );\n\t\t\ti1 = indexAttr.getX( i1 );\n\n\t\t}\n\n\t\t_v0.fromBufferAttribute( posAttr, i0 );\n\t\t_v1.fromBufferAttribute( posAttr, i1 );\n\n\t\t// get the ray corresponding to the edge\n\t\ttoNormalizedRay( _v0, _v1, _ray );\n\n\t\t// find the shared ray with other edges\n\t\tlet info;\n\t\tlet commonRay = rays.findClosestRay( _ray );\n\t\tif ( commonRay === null ) {\n\n\t\t\tcommonRay = _ray.clone();\n\t\t\trays.addRay( commonRay );\n\n\t\t}\n\n\t\tif ( ! fragmentMap.has( commonRay ) ) {\n\n\t\t\tfragmentMap.set( commonRay, {\n\n\t\t\t\tforward: [],\n\t\t\t\treverse: [],\n\t\t\t\tray: commonRay,\n\n\t\t\t} );\n\n\t\t}\n\n\t\tinfo = fragmentMap.get( commonRay );\n\n\t\t// store the stride of edge endpoints along the ray\n\t\tlet start = getProjectedDistance( commonRay, _v0 );\n\t\tlet end = getProjectedDistance( commonRay, _v1 );\n\t\tif ( start > end ) {\n\n\t\t\t[ start, end ] = [ end, start ];\n\n\t\t}\n\n\t\tif ( _ray.direction.dot( commonRay.direction ) < 0 ) {\n\n\t\t\tinfo.reverse.push( { start, end, index } );\n\n\t\t} else {\n\n\t\t\tinfo.forward.push( { start, end, index } );\n\n\t\t}\n\n\t}\n\n\t// match the found sibling edges\n\tfragmentMap.forEach( ( { forward, reverse }, ray ) => {\n\n\t\tmatchEdges( forward, reverse, disjointConnectivityMap, eps );\n\n\t\tif ( forward.length === 0 && reverse.length === 0 ) {\n\n\t\t\tfragmentMap.delete( ray );\n\n\t\t}\n\n\t} );\n\n\treturn {\n\t\tdisjointConnectivityMap,\n\t\tfragmentMap,\n\t};\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}