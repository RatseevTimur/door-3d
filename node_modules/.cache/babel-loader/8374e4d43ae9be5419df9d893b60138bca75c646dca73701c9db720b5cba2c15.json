{"ast":null,"code":"var _jsxFileName = \"/Users/ratseevtimur/Documents/Test-Projects/door-3d/src/components/3D/GLTF.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState, useEffect, useMemo } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { GizmoHelper, GizmoViewport, Html, useGLTF, useTexture } from \"@react-three/drei\";\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport * as THREE from \"three\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"./3D.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Model({\n  textureSelected,\n  scaleValue\n}) {\n  _s();\n  // const gltf = useLoader(GLTFLoader, '/door-gltf/scene.gltf')\n  // return <primitive object={gltf.scene} />\n\n  const groupRef = useRef();\n  const {\n    nodes,\n    materials\n  } = useGLTF('/door-gltf/scene.gltf');\n  const texture = useTexture(textureSelected.url);\n  return (\n    /*#__PURE__*/\n    //   <group ref={groupRef} {...props} dispose={null}>\n    _jsxDEV(\"mesh\", {\n      castShadow: true,\n      receiveShadow: true,\n      scale: scaleValue,\n      rotation: [0, 1.56, 0],\n      geometry: nodes.Door_Default_0.geometry\n      //material={materials['Material.001']}\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n        map: texture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this)\n    //  <mesh castShadow receiveShadow geometry={nodes.floatBufferViews.geometry} material={materials['Material.002']} /> \n    //   </group>\n  );\n}\n_s(Model, \"8yzCRZU/8Fcyaoj+X2InPVhCmRg=\", false, function () {\n  return [useGLTF, useTexture];\n});\n_c = Model;\nuseGLTF.preload(\"/door-gltf/scene.gltf\");\nconst Scene = ({\n  scaleValue\n}) => {\n  _s2();\n  let textureSelected = useSelector(state => state.textureSelected);\n  // textureSelected.wrapS = THREE.RepeatWrapping\n  // textureSelected.wrapT = THREE.MirroredRepeatWrapping\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Model, {\n      textureSelected: textureSelected,\n      scaleValue: scaleValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GizmoHelper, {\n      alignment: \"bottom-right\",\n      margin: [80, 80],\n      children: /*#__PURE__*/_jsxDEV(GizmoViewport, {\n        labelColor: \"white\",\n        axisHeadScale: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s2(Scene, \"yxFXJw8oDwbh3V4BKPpXnJD76fI=\", false, function () {\n  return [useSelector];\n});\n_c2 = Scene;\nexport default Scene;\nvar _c, _c2;\n$RefreshReg$(_c, \"Model\");\n$RefreshReg$(_c2, \"Scene\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useMemo","useLocation","GizmoHelper","GizmoViewport","Html","useGLTF","useTexture","Canvas","useFrame","useLoader","useResource","TextureLoader","THREE","useSelector","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","Model","textureSelected","scaleValue","_s","groupRef","nodes","materials","texture","url","castShadow","receiveShadow","scale","rotation","geometry","Door_Default_0","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","preload","Scene","_s2","state","alignment","margin","labelColor","axisHeadScale","_c2","$RefreshReg$"],"sources":["/Users/ratseevtimur/Documents/Test-Projects/door-3d/src/components/3D/GLTF.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport { GizmoHelper, GizmoViewport, Html, useGLTF, useTexture } from \"@react-three/drei\"\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport \"./3D.scss\"\n\nexport function Model({ textureSelected, scaleValue }) {\n    // const gltf = useLoader(GLTFLoader, '/door-gltf/scene.gltf')\n    // return <primitive object={gltf.scene} />\n\n    const groupRef = useRef()\n    const { nodes, materials } = useGLTF('/door-gltf/scene.gltf')\n    const texture = useTexture(textureSelected.url);\n    return (\n        //   <group ref={groupRef} {...props} dispose={null}>\n        <mesh castShadow receiveShadow\n            scale={scaleValue} rotation={[0, 1.56, 0]}\n            geometry={nodes.Door_Default_0.geometry}\n        //material={materials['Material.001']}\n        >\n            <meshPhysicalMaterial map={texture} />\n        </mesh>\n        //  <mesh castShadow receiveShadow geometry={nodes.floatBufferViews.geometry} material={materials['Material.002']} /> \n        //   </group>\n    )\n}\n\nuseGLTF.preload(\"/door-gltf/scene.gltf\");\n\nconst Scene = ({scaleValue}) => {\n    let textureSelected = useSelector((state) => state.textureSelected)\n    // textureSelected.wrapS = THREE.RepeatWrapping\n    // textureSelected.wrapT = THREE.MirroredRepeatWrapping\n\n   \n    return (\n        <>\n            <Model textureSelected={textureSelected} scaleValue={scaleValue}/>\n\n            <GizmoHelper alignment=\"bottom-right\" margin={[80, 80]}>\n                <GizmoViewport labelColor=\"white\" axisHeadScale={1} />\n            </GizmoHelper>\n        </>\n    )\n}\n\nexport default Scene\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACnE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,EAAEC,aAAa,EAAEC,IAAI,EAAEC,OAAO,EAAEC,UAAU,QAAQ,mBAAmB;AACzF,SAASC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,oBAAoB;AAC7E,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAO,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElB,OAAO,SAASC,KAAKA,CAAC;EAAEC,eAAe;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACnD;EACA;;EAEA,MAAMC,QAAQ,GAAG1B,MAAM,CAAC,CAAC;EACzB,MAAM;IAAE2B,KAAK;IAAEC;EAAU,CAAC,GAAGpB,OAAO,CAAC,uBAAuB,CAAC;EAC7D,MAAMqB,OAAO,GAAGpB,UAAU,CAACc,eAAe,CAACO,GAAG,CAAC;EAC/C;IAAA;IACI;IACAX,OAAA;MAAMY,UAAU;MAACC,aAAa;MAC1BC,KAAK,EAAET,UAAW;MAACU,QAAQ,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAE;MAC1CC,QAAQ,EAAER,KAAK,CAACS,cAAc,CAACD;MACnC;MAAA;MAAAE,QAAA,eAEIlB,OAAA;QAAsBmB,GAAG,EAAET;MAAQ;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC;IACN;IACA;EAAA;AAER;AAACjB,EAAA,CAnBeH,KAAK;EAAA,QAKYd,OAAO,EACpBC,UAAU;AAAA;AAAAkC,EAAA,GANdrB,KAAK;AAqBrBd,OAAO,CAACoC,OAAO,CAAC,uBAAuB,CAAC;AAExC,MAAMC,KAAK,GAAGA,CAAC;EAACrB;AAAU,CAAC,KAAK;EAAAsB,GAAA;EAC5B,IAAIvB,eAAe,GAAGP,WAAW,CAAE+B,KAAK,IAAKA,KAAK,CAACxB,eAAe,CAAC;EACnE;EACA;;EAGA,oBACIJ,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACIlB,OAAA,CAACG,KAAK;MAACC,eAAe,EAAEA,eAAgB;MAACC,UAAU,EAAEA;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAElEvB,OAAA,CAACd,WAAW;MAAC2C,SAAS,EAAC,cAAc;MAACC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAE;MAAAZ,QAAA,eACnDlB,OAAA,CAACb,aAAa;QAAC4C,UAAU,EAAC,OAAO;QAACC,aAAa,EAAE;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC;EAAA,eAChB,CAAC;AAEX,CAAC;AAAAI,GAAA,CAfKD,KAAK;EAAA,QACe7B,WAAW;AAAA;AAAAoC,GAAA,GAD/BP,KAAK;AAiBX,eAAeA,KAAK;AAAA,IAAAF,EAAA,EAAAS,GAAA;AAAAC,YAAA,CAAAV,EAAA;AAAAU,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}