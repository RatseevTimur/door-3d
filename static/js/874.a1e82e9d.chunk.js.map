{"version":3,"file":"static/js/874.a1e82e9d.chunk.js","mappings":"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","sources":["components/3D/model.js","components/3D/Box.js","components/3D/EditSinkLayer.js","components/3D/inPoly.js","components/3D/Sink.js"],"sourcesContent":["import { MeshTransmissionMaterial } from \"@react-three/drei\"\n\nexport const Torus = (props) => (\n    <mesh receiveShadow castShadow {...props}>\n        <torusGeometry args={[4, 1.2, 128, 64]} />\n        <MeshTransmissionMaterial backside backsideThickness={5} thickness={2} />\n    </mesh>\n)\n\nexport const Knot = (props) => (\n    <mesh receiveShadow castShadow {...props}>\n        <torusKnotGeometry args={[3, 1, 256, 32]} />\n        <MeshTransmissionMaterial backside backsideThickness={5} thickness={2} />\n    </mesh>\n)\n\nconst App = () => (\n    <>\n        <Torus position={[5,5,3]}/>\n        <Knot castShadow position={[-10, -5, -10]}/>\n    </>\n)\n\nexport default App;","import React, { useRef, useState, useEffect, useLayoutEffect, useMemo } from 'react'\nimport { NavLink, useNavigate, useParams, useLocation, BrowserRouter } from \"react-router-dom\";\nimport {\n    Edges, Stage, Extrude, Decal, RandomizedLight,\n    SoftShadows, Float, CameraControls, Sky, PerformanceMonitor,\n    useGLTF, useTexture, PivotControls, AccumulativeShadows,\n    GizmoHelper, GizmoViewport, OrbitControls, Html,\n} from \"@react-three/drei\"\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport * as THREE from \"three\"\nimport { Geometry, Base, Subtraction, Addition, Brush } from '@react-three/csg'\nimport Model from './model.js'\nimport Sink from './Sink.js'\nimport EditSinkLayer from './EditSinkLayer.js'\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setModelProperties, set_Prop_Box_forma } from \"../../redux/reducers/model-properties.js\";\nimport { DoubleSide } from \"three\";\n\nimport \"./3D.scss\"\n\nconst Scene = ({ forma, mesh }) => {\n    let scale = 100\n    let dispatch = useDispatch()\n    const location = useLocation()\n    let textureSelected = useSelector((state) => state.textureSelected)\n    let prop_Box_forma = useSelector((state) => state.modelProperties.prop_Box_forma)\n    const { visible, colorBackground } = useSelector((state) => state.scene)\n    const [boxSize, setBoxSize] = useState(prop_Box_forma);\n\n    useEffect(() => {\n        if (!location.pathname.includes('/save')) {\n            dispatch(set_Prop_Box_forma(boxSize))\n            dispatch(setModelProperties(boxSize))\n        }\n    }, [boxSize])\n\n    const textureMap = useLoader(TextureLoader, textureSelected.url)\n    const texturePlaneMap = useLoader(TextureLoader, '/textures/tile_texture3062.jpeg')\n    textureMap.wrapS = THREE.RepeatWrapping\n    textureMap.wrapT = THREE.MirroredRepeatWrapping\n   \n\n    function NewBox(props) {\n\n        // var matrix = new THREE.Matrix4();\n        // matrix.multiply(new THREE.Matrix4().makeTranslation(0, 0, 850));\n        // matrix.multiply(new THREE.Matrix4().makeRotationZ(Math.PI / 2));\n\n        return (\n            <mesh\n                ref={mesh}\n                castShadow receiveShadow {...props}\n                matrixAutoUpdate={true}\n                castShadow\n            //onPointerDown={console.log}\n            //onPointerMove={(e) => console.log('move')}\n            >\n                <Geometry>\n                    <Base /*rotation={[ 0, Math.PI / 2, 0]} position={[-0.35, 0.4, 0.4]} */>\n                        <boxGeometry attach=\"geometry\" args={[boxSize.widthAll / 100, boxSize.heightAll / 100, boxSize.thickness / 100]} />\n                    </Base>\n\n                    {/* <Subtraction rotation={[Math.PI / 2, 0, 0]} position={[0, 0, 0]}>\n                        <cylinderGeometry args={[1, 1, 1, 66, 32]} />\n                    </Subtraction> */}\n\n                    <Subtraction rotation={[0, 0, 0]} position={[0, 0, 0]}>\n                        <cylinderGeometry args={[0, 0, 0, 3, 3]} />\n                    </Subtraction>\n\n                    {boxSize.cuts.map((cut, i) => {\n                        if (cut.forma === \"square\") return (\n                            <Subtraction key={i} rotation={[0, 0, cut.rotation[2]]} position={[cut.position[0], cut.position[1], 0]}>\n                                <boxGeometry args={[cut.width / scale, cut.height / scale, 1]} />\n                            </Subtraction>\n                        )\n                        else return (\n                            <Subtraction key={i} rotation={[Math.PI / 2, 0, 0]} position={[cut.position[0], cut.position[1], 0]}>\n                                <cylinderGeometry args={[cut.width / 2 / scale, cut.width / 2 / scale, 1]} />\n                            </Subtraction>\n                        )\n                    })}\n\n                </Geometry>\n                {/* <ChamfersModels boxSize={boxSize} textureMap={textureMap} setBoxSize={setBoxSize} /> */}\n                <meshPhongMaterial\n                    map={textureMap} shininess={100} bumpMap={textureMap} bumpScale={0.01} transparent={false} attach=\"material-0\"\n                    // opacity={1} color={'lightgray'} \n                    color={0x999999}\n                />\n\n                <Sink setBoxSize={setBoxSize} boxSize={boxSize} />\n\n                {/* <meshStandardMaterial attach=\"material-1\" color=\"#2A8AFF\" /> */}\n            </mesh>\n        )\n    }\n\n    return (\n        <>\n        {textureSelected && \n        <>\n            \n            {visible &&\n                <>\n                    <Html transform /*occlude*/ zIndexRange={1}\n                        position={[-boxSize.widthAll / 200 - 2.5, 0, 0]} rotation={[0, 0, Math.PI / 2]}>\n                        <div className=\"p-inputgroup\">\n                            {!location.pathname.includes('/save') ?\n                                <>\n                                    <span className=\"p-inputgroup-addon\">mm</span>\n                                    <input value={boxSize.heightAll} placeholder=\"size, mm\" style={{ width: \"100px\" }}\n                                        step={4} min={50} type='number'\n                                        onChange={(e) => setBoxSize({ ...boxSize, heightAll: +e.target.value })} />\n                                </>\n                                : <span className=\"p-inputgroup-addon\">{boxSize.heightAll}</span>\n                            }\n\n                        </div>\n                        {/* <div className=\"cls\"></div> */}\n                    </Html>\n\n                    <Html transform /*occlude*/ zIndexRange={1}\n                        position={[0, boxSize.heightAll / 200 + 2.5, 0]}>\n                        <div className=\"p-inputgroup\">\n                            {!location.pathname.includes('/save') ?\n                                <>\n                                    <span className=\"p-inputgroup-addon\">mm</span>\n                                    <input value={boxSize.widthAll} placeholder=\"size, mm\" style={{ width: \"100px\" }}\n                                        step={4} min={50} type='number'\n                                        onChange={(e) => setBoxSize({ ...boxSize, widthAll: +e.target.value })} />\n                                </>\n                                : <span className=\"p-inputgroup-addon\">{boxSize.widthAll}</span>\n                            }\n\n                        </div>\n                        {/* <DragButton boxSize={boxSize} setBoxSize={setBoxSize} /> */}\n                    </Html>\n\n                </>\n            }\n            \n            <Sky />\n            <NewBox instanceMatrix={true} needsUpdate={true} />\n            <Model/>\n            <EditSinkLayer boxSize={boxSize} setBoxSize={setBoxSize} />\n\n            <mesh position={[0,-11, 0]} rotation={[Math.PI / 2, 0, 0]} \n                scale={[100, 100, 1]} receiveShadow>\n                <planeBufferGeometry />\n                <meshPhongMaterial color=\"gray\" map={texturePlaneMap} side={DoubleSide} />\n            </mesh>\n\n            <GizmoHelper alignment=\"bottom-right\" margin={[80, 80]}>\n                <GizmoViewport labelColor=\"white\" axisHeadScale={1} />\n            </GizmoHelper>\n            \n        </>\n        }\n        </>\n    )\n}\n\nexport default Scene\n","import React, { useState } from 'react'\n\nconst EditSinkLayer = (props) => {\n    let scale = 100\n    let boxSize = props.boxSize\n    const [hovered, setHover] = useState(false)\n\n    function removeCut(cut) {\n        props.setBoxSize({\n            ...boxSize, cuts: boxSize.cuts.filter((item, i) => i !== cut)\n        })\n    }\n\n    function editCut(cut) {\n        // тут будет фнукция изменения положения и размера отверстия\n    }\n\n    return (\n        <>\n            {props.boxSize.cuts.map((cut, i) => {\n\n                return (\n                    <mesh key={i}\n                        rotation={\n                            cut.forma === \"square\" ? [0, 0, cut.rotation[2]] : [Math.PI / 2, 0, 0]\n                        }\n                        position={[cut.position[0], cut.position[1], 0]}\n                        // onPointerDown={()=> props.removeCut(i)}\n                        // onDoubleClick={()=> props.removeCut(i)}\n                        onContextMenu={() => removeCut(i)}\n                        onPointerOver={(event) => setHover(i)}\n                        onPointerOut={(event) => setHover(false)}\n                    >\n                        {cut.forma === \"square\" ?\n                            <boxGeometry args={[cut.width / scale, cut.height / scale, boxSize.thickness / scale]} />\n                            :\n                            <cylinderGeometry args={[cut.width / 2 / scale, cut.width / 2 / scale, boxSize.thickness / scale]} />\n                        }\n                        \n                        <meshPhongMaterial color={hovered === i ? 'red' : '#fff'} transparent={true} opacity={hovered !== i ? 0 : .6} />\n                    </mesh>\n                )\n\n            })\n            }\n        </>\n    )\n\n}\n\nexport default EditSinkLayer\n","export function inPoly(position, sinkState, boxSize, scal){\n    // console.log(\"!!!!!!!!!\", position, sinkState, boxSize, scal)\n    var x = position.x<0 ? position.x - sinkState.width/scal/2 : position.x + sinkState.width/scal/2;\n    var y = position.y<0 ? position.y - sinkState.height/scal/2 : position.y + sinkState.height/scal/2;\n    let xp, yp\n\n    if(boxSize.forma === 3){ // ограничение координат для П-образной формы\n        // Координаты  П образной модели\n        xp = new Array( // Массив X-координат полигона\n            -boxSize.widthAll/scal+boxSize.widthRight/scal/2, //1\n            -boxSize.widthAll/scal+boxSize.widthRight/scal/2, //2\n            boxSize.widthRight/scal/2, //3\n            boxSize.widthRight/scal/2, //4\n            -boxSize.widthRight/scal/2, //5\n            -boxSize.widthRight/scal/2, //6\n            -boxSize.widthAll/scal+boxSize.widthRight/scal, //7\n            -boxSize.widthAll/scal+boxSize.widthRight/scal, //8\n        ); // Массив X-координат полигона\n        yp = new Array( // Массив Y-координат полигона\n            -boxSize.heightAll/scal/2, //1\n            boxSize.heightAll/scal/2, //2\n            boxSize.heightAll/scal/2, //3\n            -( boxSize.heightAll/scal/2 - (boxSize.heightAll - boxSize.heightRight)/scal ), //4\n            -( boxSize.heightAll/scal/2 - (boxSize.heightAll - boxSize.heightRight)/scal ), //5\n            boxSize.heightAll/scal/2 - boxSize.heightRight/scal + boxSize.heightInsideRight/scal, //6\n            (boxSize.heightAll/2 - (boxSize.heightRight - boxSize.heightInsideRight))/scal, //7\n            -boxSize.heightAll/scal/2, //8\n        ); // Массив Y-координат полигона\n       \n    }else if(boxSize.forma === 2){ // ограничение координат для Г-образной формы\n        xp = new Array( // Массив X-координат полигона\n            -boxSize.widthVertical/scal/2,\n            -boxSize.widthVertical/scal/2,\n            (boxSize.widthAll-boxSize.widthVertical/2)/scal,\n            (boxSize.widthAll-boxSize.widthVertical/2)/scal,\n            boxSize.widthVertical/scal/2,\n            boxSize.widthVertical/scal/2,\n        ); // Массив X-координат полигона\n        yp = new Array( // Массив Y-координат полигона\n            -boxSize.heightAll/scal/2,\n            boxSize.heightAll/scal/2,\n            boxSize.heightAll/scal/2,\n            (boxSize.heightAll - boxSize.heightGorizonal*2)/scal/2,\n            (boxSize.heightAll - boxSize.heightGorizonal*2)/scal/2,\n            -boxSize.heightAll/scal/2,\n        ); // Массив Y-координат полигона\n       \n    }\n\n    var npol = xp.length;\n    var j = npol - 1;\n    var c = false;\n\n    for (var i = 0; i < npol;i++){\n        if ((((yp[i]<=y) && (y<yp[j])) || ((yp[j]<=y) && (y<yp[i]))) &&\n          (x > (xp[j] - xp[i]) * (y - yp[i]) / (yp[j] - yp[i]) + xp[i])) {\n          c = !c\n        }\n      j = i;\n    }\n    return c;\n}\n","import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { Canvas, useLoader, useThree } from '@react-three/fiber'\nimport { useTexture, PivotControls, Decal, Html, Text, Grid, Line } from \"@react-three/drei\"\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'\n// import { useControls } from 'leva'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setVisibleSink } from \"../../redux/reducers/scene.js\";\nimport { inPoly } from './inPoly.js'\n\nimport \"./3D.scss\"\nimport { Button } from 'primereact/button'\n\nconst Sink = (props) => {\n    let scal = 100 // значение масштабирования\n    const { visibleSink, sinkState } = useSelector((state) => state.scene)\n    const dispatch = useDispatch()\n    const [pos, setXYZ] = useState([0, 0, props.boxSize.thickness / scal])\n\n    const [rot, setRot] = useState([0, 0, 0])\n    const [colorDecal, setColorDecal] = useState('rgb(236, 108, 108)')    \n\n    function cutSink() {\n        props.setBoxSize({\n            ...props.boxSize, cuts:\n\n                [...props.boxSize.cuts, {\n                    forma: sinkState.forma, width: sinkState.width, height: sinkState.height,\n                    position: pos, rotation: rot\n                }]\n\n        })\n        // props.cuts.push({ sinkSize: scale, position: positionSink } )\n        dispatch(setVisibleSink())\n    }\n    \n\n    //вычесление расстояния от края до отверстия\n    //без учета поворотов (для прямоугольных отверстий)\n    function sizeToEnd() {\n        // Расстояния от края до центра по \"х\" и \"у\"\n        let endToCenterX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2)\n        let endToCenterY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal)\n        // Расстояния от края до кпая отверстия по \"х\" и \"у\"\n        // без учета повроротов для прямоугольных отверстий\n        let endToEndX = Math.round(pos[0] * scal - -props.boxSize.widthAll / 2 - 100)\n        let endToEndY = Math.round(props.boxSize.heightAll / 2 - pos[1] * scal - 150)\n        return {\n            endToCenterX: endToCenterX, // от края до центра по Х\n            endToCenterY: endToCenterY, // от края до центра по Y\n            endToEndX: endToEndX, // от края до края по Х\n            endToEndY: endToEndY // от края до края по Y\n        }\n    }\n\n    // Функция изменение координат отвертсия при перетягивании мышью\n    function dragSink(position) {\n        // Ограничим движение отверстия границами габаритов модели\n        let x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n        let y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n        // Зададим изначальное положение отверстия для разных форм\n        let defPointCorrection = 0\n\n        if(props.boxSize.forma === 3){ // ограничение координат для П-образной формы\n            defPointCorrection = (props.boxSize.widthAll-props.boxSize.widthRight)/2/scal\n            // Изменить цвет декаля \n            // if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ) setColorDecal('yellow')\n            // else setColorDecal('rgb(236, 108, 108)')\n            // Сдвинуть Декаль или ограниить движение\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n            }\n           \n        }else if(props.boxSize.forma === 2){ // ограничение координат для Г-образной формы\n            defPointCorrection = -(props.boxSize.widthAll-props.boxSize.widthVertical)/2/scal\n\n            if( inPoly(position, {width: sinkState.width, height: sinkState.height}, props.boxSize, scal) ){\n\n                setXYZ(\n                    [\n                        position.x+defPointCorrection, \n                        position.y, \n                        props.boxSize.thickness / scal / 2 + 0.01\n                    ]\n                )\n\n            }\n           \n        }else{ // ограничение координат для простой формы\n            defPointCorrection = 0\n            x_axisLimits = Math.abs(position.x) + sinkState.width/200 < Math.abs(props.boxSize.widthAll/200)\n            y_axisLimits = Math.abs(position.y) + (sinkState.height || sinkState.width)/200< Math.abs(props.boxSize.heightAll/200)\n\n            setXYZ(\n                [\n                    x_axisLimits ? position.x+defPointCorrection : pos[0], \n                    y_axisLimits ? position.y : pos[1], \n                    props.boxSize.thickness / scal / 2 + 0.01\n                ]\n            )\n        }\n    }\n\n    let shemaCircle = '../icons/circle.svg'\n    let shemaDecal = useTexture(shemaCircle)\n    \n    if (visibleSink) return (\n        <>\n            <group position={[ 0, 0, 0.25]}>\n                <PivotControls\n                    scale={0.88}\n                    activeAxes={[true, true, false]} //\n                    // onClick={() => { console.log(\"positionSink!!!\", positionSink) }}\n                    onDrag={(local) => {\n                        const position = new THREE.Vector3()\n                        // console.log(position)\n                        // setPositionSink(position)\n                        const scale = new THREE.Vector3()\n                        const quaternion = new THREE.Quaternion()\n                        local.decompose(position, quaternion, scale)\n                        const rotation = new THREE.Euler().setFromQuaternion(quaternion)\n                        dragSink(position)\n                        // console.log(position.x)\n                        setRot([rotation.x, rotation.y, rotation.z])\n                    }}\n                    onDragEnd={() => {\n                        // console.log(pos, rot)\n                    }}\n                />\n            </group>\n\n\n            <Decal //debug={debug} часть панели инструментов\n                position={pos} rotation={rot}\n                // scale={2 * scale}\n                scale={sinkState.forma == \"square\" ?\n                    [sinkState.width / 100, sinkState.height / 100, 1]\n                    :\n                    [sinkState.width / 100, sinkState.width / 100, 1]\n                }\n                // map={useTexture(urlPlita)}\n                color={colorDecal} //opacity={0.2}\n            >\n                {sinkState.forma !== \"square\" &&\n                    <meshPhysicalMaterial\n                        transparent\n                        polygonOffset\n                        polygonOffsetFactor={-10}\n                        map={shemaDecal}\n                        mapflipY={false}\n                        mapanisotropy={16}\n                        iridescence={1}\n                        iridescenceIOR={1}\n                        iridescenceThicknessRange={[0, 1400]}\n                        roughness={1}\n                        clearcoat={0.5}\n                        metalness={0.75}\n                        toneMapped={false}\n                    />\n                }\n            </Decal>    \n\n            <Html transform zIndexRange={1} position={[pos[0] + 1.5, pos[1] - 1, props.boxSize.thickness / scal / 2]}>\n                <Button style={styles.buttonSink} icon=\"pi pi-check\"\n                    tooltip=\"Вырезать\"\n                    // disabled={!positionSink.x}\n                    onClick={() => cutSink()}\n                />\n            </Html>\n        </>\n    )\n}\n\nexport default Sink\n\nconst styles = {\n    buttonSink: {\n        width: \"25px\",\n        height: \"15px\"\n    }\n}\n"],"names":["Torus","props","_jsxs","receiveShadow","castShadow","children","_jsx","args","MeshTransmissionMaterial","backside","backsideThickness","thickness","Knot","App","_Fragment","position","_ref","forma","mesh","scale","dispatch","useDispatch","location","useLocation","textureSelected","useSelector","state","prop_Box_forma","modelProperties","visible","colorBackground","scene","boxSize","setBoxSize","useState","useEffect","pathname","includes","set_Prop_Box_forma","setModelProperties","textureMap","useLoader","TextureLoader","url","texturePlaneMap","NewBox","ref","matrixAutoUpdate","Geometry","Base","attach","widthAll","heightAll","Subtraction","rotation","cuts","map","cut","i","width","height","Math","PI","shininess","bumpMap","bumpScale","transparent","color","Sink","wrapS","THREE","wrapT","Html","transform","zIndexRange","className","value","placeholder","style","step","min","type","onChange","e","target","Sky","instanceMatrix","needsUpdate","Model","EditSinkLayer","side","DoubleSide","GizmoHelper","alignment","margin","GizmoViewport","labelColor","axisHeadScale","hovered","setHover","onContextMenu","filter","item","removeCut","onPointerOver","event","onPointerOut","opacity","inPoly","sinkState","scal","x","y","xp","yp","Array","widthRight","heightRight","heightInsideRight","widthVertical","heightGorizonal","npol","length","j","c","visibleSink","pos","setXYZ","rot","setRot","colorDecal","setColorDecal","shemaDecal","useTexture","PivotControls","activeAxes","onDrag","local","quaternion","decompose","setFromQuaternion","x_axisLimits","abs","y_axisLimits","defPointCorrection","dragSink","z","onDragEnd","Decal","polygonOffset","polygonOffsetFactor","mapflipY","mapanisotropy","iridescence","iridescenceIOR","iridescenceThicknessRange","roughness","clearcoat","metalness","toneMapped","Button","styles","buttonSink","icon","tooltip","onClick","setVisibleSink"],"sourceRoot":""}