{"version":3,"file":"static/js/912.df33a4c7.chunk.js","mappings":"wNAWO,SAASA,EAAKC,GAAmC,IAAlC,gBAAEC,EAAe,WAAEC,GAAYF,GAIhCG,EAAAA,EAAAA,UAAjB,MACM,MAAEC,EAAK,UAAEC,IAAcC,EAAAA,EAAAA,GAAQ,yBAC/BC,GAAUC,EAAAA,EAAAA,GAAWP,EAAgBQ,KAC3C,OAEIC,EAAAA,EAAAA,KAAA,QAAMC,YAAU,EAACC,eAAa,EAC1BC,MAAOX,EAAYY,SAAU,CAAC,EAAG,KAAM,GACvCC,SAAUX,EAAMY,eAAeD,SACnCE,UAEIP,EAAAA,EAAAA,KAAA,wBAAsBQ,IAAKX,KAKvC,CAEAD,EAAAA,EAAQa,QAAQ,yBAEhB,MAiBA,EAjBcC,IAAmB,IAAlB,WAAClB,GAAWkB,EACnBnB,GAAkBoB,EAAAA,EAAAA,KAAaC,GAAUA,EAAMrB,kBAKnD,OACIsB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAP,SAAA,EACIP,EAAAA,EAAAA,KAACX,EAAK,CAACE,gBAAiBA,EAAiBC,WAAYA,KAErDQ,EAAAA,EAAAA,KAACe,EAAAA,EAAW,CAACC,UAAU,eAAeC,OAAQ,CAAC,GAAI,IAAIV,UACnDP,EAAAA,EAAAA,KAACkB,EAAAA,EAAa,CAACC,WAAW,QAAQC,cAAe,QAEtD,C","sources":["components/3D/GLTF.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport { GizmoHelper, GizmoViewport, Html, useGLTF, useTexture } from \"@react-three/drei\"\nimport { Canvas, useFrame, useLoader, useResource } from '@react-three/fiber'\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport * as THREE from \"three\"\n\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport \"./3D.scss\"\n\nexport function Model({ textureSelected, scaleValue }) {\n    // const gltf = useLoader(GLTFLoader, '/door-gltf/scene.gltf')\n    // return <primitive object={gltf.scene} />\n\n    const groupRef = useRef()\n    const { nodes, materials } = useGLTF('/door-gltf/scene.gltf')\n    const texture = useTexture(textureSelected.url);\n    return (\n        //   <group ref={groupRef} {...props} dispose={null}>\n        <mesh castShadow receiveShadow\n            scale={scaleValue} rotation={[0, 1.56, 0]}\n            geometry={nodes.Door_Default_0.geometry}\n        //material={materials['Material.001']}\n        >\n            <meshPhysicalMaterial map={texture} />\n        </mesh>\n        //  <mesh castShadow receiveShadow geometry={nodes.floatBufferViews.geometry} material={materials['Material.002']} /> \n        //   </group>\n    )\n}\n\nuseGLTF.preload(\"/door-gltf/scene.gltf\");\n\nconst Scene = ({scaleValue}) => {\n    let textureSelected = useSelector((state) => state.textureSelected)\n    // textureSelected.wrapS = THREE.RepeatWrapping\n    // textureSelected.wrapT = THREE.MirroredRepeatWrapping\n\n   \n    return (\n        <>\n            <Model textureSelected={textureSelected} scaleValue={scaleValue}/>\n\n            <GizmoHelper alignment=\"bottom-right\" margin={[80, 80]}>\n                <GizmoViewport labelColor=\"white\" axisHeadScale={1} />\n            </GizmoHelper>\n        </>\n    )\n}\n\nexport default Scene\n"],"names":["Model","_ref","textureSelected","scaleValue","useRef","nodes","materials","useGLTF","texture","useTexture","url","_jsx","castShadow","receiveShadow","scale","rotation","geometry","Door_Default_0","children","map","preload","_ref2","useSelector","state","_jsxs","_Fragment","GizmoHelper","alignment","margin","GizmoViewport","labelColor","axisHeadScale"],"sourceRoot":""}